/* THIS IS A SIMULATION FOR 3 NODES IN A STRAIGHT LINE */
if (strcmp(data, "1") == 0) {
	uint8_t tmp[SETUP_PACKET_SIZE+1*sizeof(rimeaddr_t)] = {0};
	struct setup_packet *sp = (struct setup_packet*)tmp;
	rimeaddr_t *neighbor_addr = sp->neighbors;

	sp->type = SETUP_PACKET;

	{
		rimeaddr_t addr;
		addr.u8[0] = 1;
		addr.u8[1] = 0;
		rimeaddr_copy(&sp->new_addr, &addr);
	}
	{
		struct coordinate coord = {0,0};
		sp->new_coord = coord;
	}

	sp->is_exit_node = 1;
	sp->num_neighbors = 1;

	{
		rimeaddr_t addr;
		addr.u8[0] = 2;
		addr.u8[1] = 0;
		rimeaddr_copy(neighbor_addr++, &addr);
	}

	setup_parse(sp,0);

	ec_set_neighbors(&g_np.c, &g_np.ns);

} else if(strcmp(data, "2") == 0) {
	uint8_t tmp[SETUP_PACKET_SIZE+2*sizeof(rimeaddr_t)] = {0};
	struct setup_packet *sp = (struct setup_packet*)tmp;
	rimeaddr_t *neighbor_addr = sp->neighbors;

	sp->type = SETUP_PACKET;

	{
		rimeaddr_t addr;
		addr.u8[0] = 2;
		addr.u8[1] = 0;
		rimeaddr_copy(&sp->new_addr, &addr);
	}
	{
		struct coordinate coord = {1,0};
		sp->new_coord = coord;
	}

	sp->is_exit_node = 0;
	sp->num_neighbors = 1;

	{
		rimeaddr_t addr;

		addr.u8[0] = 1;
		addr.u8[1] = 0;
		rimeaddr_copy(neighbor_addr++, &addr);

		/*addr.u8[0] = 3;
		addr.u8[1] = 0;
		rimeaddr_copy(neighbor_addr++, &addr);*/
	}

	setup_parse(sp, 0);

	ec_set_neighbors(&g_np.c, &g_np.ns);
} else if(strcmp(data, "3") == 0) {
	uint8_t tmp[SETUP_PACKET_SIZE+1*sizeof(rimeaddr_t)] = {0};
	struct setup_packet *sp = (struct setup_packet*)tmp;
	rimeaddr_t *neighbor_addr = sp->neighbors;

	sp->type = SETUP_PACKET;

	{
		rimeaddr_t addr;
		addr.u8[0] = 3;
		addr.u8[1] = 0;
		rimeaddr_copy(&sp->new_addr, &addr);
	}
	{
		struct coordinate coord = {2,0};
		sp->new_coord = coord;
	}

	sp->is_exit_node = 0;
	sp->num_neighbors = 1;

	{
		rimeaddr_t addr;

		addr.u8[0] = 2;
		addr.u8[1] = 0;
		rimeaddr_copy(neighbor_addr++, &addr);
	}

	setup_parse(sp, 0);

	ec_set_neighbors(&g_np.c, &g_np.ns);
