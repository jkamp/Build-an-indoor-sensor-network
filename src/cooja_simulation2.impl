/* FOR 8 NODES IN FOLLOWING TOPOLOGY:
      (3) (4) (5)
 (1*) (2) (6) (7) (8*)
*/
if (strcmp(data, "1") == 0) {
	uint8_t tmp[SETUP_PACKET_SIZE+1*sizeof(rimeaddr_t)] = {0};
	struct setup_packet *sp = (struct setup_packet*)tmp;
	rimeaddr_t *neighbor_addr = sp->neighbors;

	sp->type = SETUP_PACKET;

	{
		rimeaddr_t addr;
		addr.u8[0] = 1;
		addr.u8[1] = 0;
		rimeaddr_copy(&sp->new_addr, &addr);
	}
	{
		struct coordinate coord = {0,0};
		sp->new_coord = coord;
	}

	sp->is_exit_node = 1;
	sp->num_neighbors = 1;

	{
		rimeaddr_t addr;
		addr.u8[0] = 2;
		addr.u8[1] = 0;
		rimeaddr_copy(neighbor_addr++, &addr);
	}

	setup_parse(sp);

	ec_set_neighbors(&g_np.c, &g_np.ns);

	LOG("Im now node %d.%d\n", rimeaddr_node_addr.u8[0],
			rimeaddr_node_addr.u8[1]);
} 
else if (strcmp(data, "2") == 0) {
	uint8_t tmp[SETUP_PACKET_SIZE+3*sizeof(rimeaddr_t)] = {0};
	struct setup_packet *sp = (struct setup_packet*)tmp;
	rimeaddr_t *neighbor_addr = sp->neighbors;

	sp->type = SETUP_PACKET;

	{
		rimeaddr_t addr;
		addr.u8[0] = 2;
		addr.u8[1] = 0;
		rimeaddr_copy(&sp->new_addr, &addr);
	}
	{
		struct coordinate coord = {1,0};
		sp->new_coord = coord;
	}

	sp->is_exit_node = 0;
	sp->num_neighbors = 3;

	{
		rimeaddr_t addr;
		addr.u8[0] = 1;
		addr.u8[1] = 0;
		rimeaddr_copy(neighbor_addr++, &addr);

		addr.u8[0] = 3;
		addr.u8[1] = 0;
		rimeaddr_copy(neighbor_addr++, &addr);

		addr.u8[0] = 6;
		addr.u8[1] = 0;
		rimeaddr_copy(neighbor_addr++, &addr);
	}

	setup_parse(sp);

	ec_set_neighbors(&g_np.c, &g_np.ns);

	LOG("Im now node %d.%d\n", rimeaddr_node_addr.u8[0],
			rimeaddr_node_addr.u8[1]);
}
else if (strcmp(data, "3") == 0) {
	uint8_t tmp[SETUP_PACKET_SIZE+2*sizeof(rimeaddr_t)] = {0};
	struct setup_packet *sp = (struct setup_packet*)tmp;
	rimeaddr_t *neighbor_addr = sp->neighbors;

	sp->type = SETUP_PACKET;

	{
		rimeaddr_t addr;
		addr.u8[0] = 3;
		addr.u8[1] = 0;
		rimeaddr_copy(&sp->new_addr, &addr);
	}
	{
		struct coordinate coord = {1,1};
		sp->new_coord = coord;
	}

	sp->is_exit_node = 0;
	sp->num_neighbors = 2;

	{
		rimeaddr_t addr;
		addr.u8[0] = 4;
		addr.u8[1] = 0;
		rimeaddr_copy(neighbor_addr++, &addr);

		addr.u8[0] = 2;
		addr.u8[1] = 0;
		rimeaddr_copy(neighbor_addr++, &addr);
	}

	setup_parse(sp);

	ec_set_neighbors(&g_np.c, &g_np.ns);

	LOG("Im now node %d.%d\n", rimeaddr_node_addr.u8[0],
			rimeaddr_node_addr.u8[1]);
}
else if (strcmp(data, "4") == 0) {
	uint8_t tmp[SETUP_PACKET_SIZE+2*sizeof(rimeaddr_t)] = {0};
	struct setup_packet *sp = (struct setup_packet*)tmp;
	rimeaddr_t *neighbor_addr = sp->neighbors;

	sp->type = SETUP_PACKET;

	{
		rimeaddr_t addr;
		addr.u8[0] = 4;
		addr.u8[1] = 0;
		rimeaddr_copy(&sp->new_addr, &addr);
	}
	{
		struct coordinate coord = {2,1};
		sp->new_coord = coord;
	}

	sp->is_exit_node = 0;
	sp->num_neighbors = 2;

	{
		rimeaddr_t addr;
		addr.u8[0] = 3;
		addr.u8[1] = 0;
		rimeaddr_copy(neighbor_addr++, &addr);

		addr.u8[0] = 5;
		addr.u8[1] = 0;
		rimeaddr_copy(neighbor_addr++, &addr);
	}

	setup_parse(sp);

	ec_set_neighbors(&g_np.c, &g_np.ns);

	LOG("Im now node %d.%d\n", rimeaddr_node_addr.u8[0],
			rimeaddr_node_addr.u8[1]);
}
else if (strcmp(data, "5") == 0) {
	uint8_t tmp[SETUP_PACKET_SIZE+2*sizeof(rimeaddr_t)] = {0};
	struct setup_packet *sp = (struct setup_packet*)tmp;
	rimeaddr_t *neighbor_addr = sp->neighbors;

	sp->type = SETUP_PACKET;

	{
		rimeaddr_t addr;
		addr.u8[0] = 5;
		addr.u8[1] = 0;
		rimeaddr_copy(&sp->new_addr, &addr);
	}
	{
		struct coordinate coord = {3,1};
		sp->new_coord = coord;
	}

	sp->is_exit_node = 0;
	sp->num_neighbors = 2;

	{
		rimeaddr_t addr;
		addr.u8[0] = 4;
		addr.u8[1] = 0;
		rimeaddr_copy(neighbor_addr++, &addr);

		addr.u8[0] = 7;
		addr.u8[1] = 0;
		rimeaddr_copy(neighbor_addr++, &addr);
	}

	setup_parse(sp);

	ec_set_neighbors(&g_np.c, &g_np.ns);

	LOG("Im now node %d.%d\n", rimeaddr_node_addr.u8[0],
			rimeaddr_node_addr.u8[1]);
}
else if (strcmp(data, "6") == 0) {
	uint8_t tmp[SETUP_PACKET_SIZE+2*sizeof(rimeaddr_t)] = {0};
	struct setup_packet *sp = (struct setup_packet*)tmp;
	rimeaddr_t *neighbor_addr = sp->neighbors;

	sp->type = SETUP_PACKET;

	{
		rimeaddr_t addr;
		addr.u8[0] = 6;
		addr.u8[1] = 0;
		rimeaddr_copy(&sp->new_addr, &addr);
	}
	{
		struct coordinate coord = {2,0};
		sp->new_coord = coord;
	}

	sp->is_exit_node = 0;
	sp->num_neighbors = 2;

	{
		rimeaddr_t addr;
		addr.u8[0] = 2;
		addr.u8[1] = 0;
		rimeaddr_copy(neighbor_addr++, &addr);

		addr.u8[0] = 7;
		addr.u8[1] = 0;
		rimeaddr_copy(neighbor_addr++, &addr);
	}

	setup_parse(sp);

	ec_set_neighbors(&g_np.c, &g_np.ns);

	LOG("Im now node %d.%d\n", rimeaddr_node_addr.u8[0],
			rimeaddr_node_addr.u8[1]);
}
else if (strcmp(data, "7") == 0) {
	uint8_t tmp[SETUP_PACKET_SIZE+3*sizeof(rimeaddr_t)] = {0};
	struct setup_packet *sp = (struct setup_packet*)tmp;
	rimeaddr_t *neighbor_addr = sp->neighbors;

	sp->type = SETUP_PACKET;

	{
		rimeaddr_t addr;
		addr.u8[0] = 7;
		addr.u8[1] = 0;
		rimeaddr_copy(&sp->new_addr, &addr);
	}
	{
		struct coordinate coord = {3,0};
		sp->new_coord = coord;
	}

	sp->is_exit_node = 0;
	sp->num_neighbors = 3;

	{
		rimeaddr_t addr;
		addr.u8[0] = 6;
		addr.u8[1] = 0;
		rimeaddr_copy(neighbor_addr++, &addr);

		addr.u8[0] = 5;
		addr.u8[1] = 0;
		rimeaddr_copy(neighbor_addr++, &addr);

		addr.u8[0] = 8;
		addr.u8[1] = 0;
		rimeaddr_copy(neighbor_addr++, &addr);
	}

	setup_parse(sp);

	ec_set_neighbors(&g_np.c, &g_np.ns);

	LOG("Im now node %d.%d\n", rimeaddr_node_addr.u8[0],
			rimeaddr_node_addr.u8[1]);
}
else if (strcmp(data, "8") == 0) {
	uint8_t tmp[SETUP_PACKET_SIZE+1*sizeof(rimeaddr_t)] = {0};
	struct setup_packet *sp = (struct setup_packet*)tmp;
	rimeaddr_t *neighbor_addr = sp->neighbors;

	sp->type = SETUP_PACKET;

	{
		rimeaddr_t addr;
		addr.u8[0] = 8;
		addr.u8[1] = 0;
		rimeaddr_copy(&sp->new_addr, &addr);
	}
	{
		struct coordinate coord = {4,0};
		sp->new_coord = coord;
	}

	sp->is_exit_node = 1;
	sp->num_neighbors = 1;

	{
		rimeaddr_t addr;
		addr.u8[0] = 7;
		addr.u8[1] = 0;
		rimeaddr_copy(neighbor_addr++, &addr);
	}

	setup_parse(sp);

	ec_set_neighbors(&g_np.c, &g_np.ns);

	LOG("Im now node %d.%d\n", rimeaddr_node_addr.u8[0],
			rimeaddr_node_addr.u8[1]);

} else if(strcmp(data, "init") == 0) {
	rimeaddr_t addr = { {0xFE, 0xFE} };
	struct sensor_packet sp = {INITIALIZE_BEST_PATHS_PACKET};
	LOG("Initing\n");
	ec_recv_broadcasts(NULL, &addr, &addr, 0, 0, &sp, sizeof(struct sensor_packet));
} else {
	LOG("ERROR: GOT MESSAGE: %s, len: %d\n", (char*)data, strlen(data));
}
